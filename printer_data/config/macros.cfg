#####################################################################
#   Macros
#####################################################################
[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    Z_TILT_ADJUST
    G28
    G0 X150 Y150 Z30 F3600
    RESTORE_GCODE_STATE NAME=STATE_G32


[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}


[gcode_macro TEST_BELTS]
gcode:
  {% if 'x' not in printer.toolhead.homed_axes %}
  {% if 'y' not in printer.toolhead.homed_axes %}
  G28 X Y 
  {% endif %}
  {% endif %}
 
  {% set circles = params.S|default(1)|int %}
  {% set rate = params.F|default(18000)|int %}
  {% for i in range(circles) %}
      G1 X{printer.toolhead.axis_minimum.x + 15} Y{printer.toolhead.axis_minimum.y + 15}  F{rate}
      G1 X{printer.toolhead.axis_maximum.x - 15} Y{printer.toolhead.axis_minimum.y + 15}  F{rate}
      G1 X{printer.toolhead.axis_maximum.x - 15} Y{printer.toolhead.axis_maximum.y - 15} F{rate}
      G1 X{printer.toolhead.axis_minimum.x + 15} Y{printer.toolhead.axis_maximum.y - 15}  F{rate}
      G1 X{printer.toolhead.axis_minimum.x + 15} Y{printer.toolhead.axis_minimum.y + 15}  F{rate}
    {% endfor %}
    G1 X{ printer.toolhead.axis_maximum.x / 2  } Y{printer.toolhead.axis_maximum.y  /2}  F{rate}


[gcode_macro TEST_Z_BOUNCE]
description: "Moves to center of bed and bounces Z axis up/down for a set number of cycles"
gcode:
  {% if 'x' not in printer.toolhead.homed_axes or 'y' not in printer.toolhead.homed_axes %}
    G28 X Y
  {% endif %}
  {% if 'z' not in printer.toolhead.homed_axes %}
    G28 Z
  {% endif %}

  {% set cycles = params.S|default(5)|int %}
  {% set distance = params.D|default(50)|float %}
  {% set feedrate = params.F|default(300)|int %}

  {% set x_center = (printer.toolhead.axis_minimum.x + printer.toolhead.axis_maximum.x) / 2 %}
  {% set y_center = (printer.toolhead.axis_minimum.y + printer.toolhead.axis_maximum.y) / 2 %}
  {% set x_center_str = "%.3f"|format(x_center) %}
  {% set y_center_str = "%.3f"|format(y_center) %}

  G1 X{x_center_str} Y{y_center_str} F6000

  {% set z_start = printer.toolhead.position.z %}
  {% set z_up = z_start + distance %}
  {% set z_start_str = "%.3f"|format(z_start) %}
  {% set z_up_str = "%.3f"|format(z_up) %}

  M118 Starting Z bounce at X={x_center_str} Y={y_center_str}, Z={z_start_str}

  {% for i in range(cycles) %}
    G1 Z{z_up_str} F{feedrate}
    G1 Z{z_start_str} F{feedrate}
  {% endfor %}

  M118 Completed Z bounce test


[gcode_macro CALIBRATE_Z]
rename_existing: BASE_CALIBRATE_Z
gcode:
    {% set nozzle_position = params.NOZZLE_POSITION %}
    {% set switch_position = params.SWITCH_POSITION %}
    {% set bed_position = params.BED_POSITION %}
    {% set switch_offset = params.SWITCH_OFFSET %}
    M117 Conditional Homing..
    _CG28                         # can also be a conditional homing macro
    M117 Z-Calibration..
    ATTACH_PROBE                # a macro for fetching the probe first
    BASE_CALIBRATE_Z NOZZLE_POSITION={nozzle_position} SWITCH_POSITION={switch_position} BED_POSITION={bed_position} SWITCH_OFFSET={switch_offset}
    DOCK_PROBE                # and parking it afterwards (or DOCK_PROBE in klicky macros)
    M117


[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}


[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}
    